name: cicd-1
on:
  push:
    branches: [ master ]
    paths:
      - src/**
      - build.gradle
      - .github/workflows/cicd-1.yaml

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Github 리포지토리에서 소스 코드 가져오기
      - name: checkout the code
        uses: actions/checkout@v4
      # Java 설정 추가
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
      # 의존성 설치 시간 단축을 위한 Gradle 패키지 캐싱
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # 권한 설정
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      # 단위 테스트 실행
      - name: Run tests
        run: ./gradlew test

  image-build:
    needs: [test] # 테스트 성공 후 빌드
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      # Github 리포지토리에서 소스 코드 가져오기
      - name: checkout
        uses: actions/checkout@v4
      # Java 설정 추가
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
      # 권한 설정
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      # 테스트 제외 빌드 실행
      - name: Build with Gradle
        run: ./gradlew build -x test
      # AWS 권한 획득
      - name: Configure AWS Credentials
        id: credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{vars.AWS_REGION}}
          role-to-assume: ${{secrets.AWS_ROLE_TO_ASSUME}}
      # Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
      # Docker 이미지 build & push
      - name: docker build & push
        run: |
          docker build -f Dockerfile --tag ${{secrets.REGISTRY}}/${{vars.REPOSITORY}}:${{github.sha}} .
          docker push ${{secrets.REGISTRY}}/${{vars.REPOSITORY}}:${{github.sha}}
  

  deploy:
    runs-on: ubuntu-latest
    needs: [ image-build ]
    permissions:
      id-token: write
      contents: read
    steps:
      # Github 리포지토리에서 소스 코드 가져오기 (Helm 차트용)
      - name: checkout
        uses: actions/checkout@v4
      # AWS 권한 획득
      - name: Configure AWS Credentials
        id: credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{vars.AWS_REGION}}
          role-to-assume: ${{secrets.AWS_ROLE_TO_ASSUME}}
      # 쿠버네티스 설정
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
      # helm 설정
      - name: Setup helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.1
      # 쿠버네티스 연결
      - name: Access kubernetes
        run: |
          aws eks update-kubeconfig --name ${{vars.CLUSTER_NAME}}
      # 쿠버네티스에 배포
      - name: deploy
        id: status
        run: |
          helm upgrade --install my-app kubernetes/my-app \
          --create-namespace \
          --namespace my-app-${{vars.SUFFIX}} \
          --set image.tag=${{github.sha}} \
          --set image.repository=${{secrets.REGISTRY}}/${{vars.REPOSITORY}}
      # 슬랙 알림
      - name: notify
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "message",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Environment : dev, Deploy Result : ${{steps.status.outcome}}, Repository : ${{github.repository}}."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK